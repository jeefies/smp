set cursorline " highlight current line
set nu

" tab 缩进
set tabstop=4 " 设置Tab长度为4空格
set shiftwidth=4 " 设置自动缩进长度为4空格
set autoindent " 继承前一行的缩进方式，适用于多行注释


syntax enable
syntax on
filetype plugin indent on

nmap gp "+p
nmap gy "+y
nmap gd "+d

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

nmap tn :tabnew<CR>

" for nerd tree use
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>

" auto open when no file choosen
autocmd vimenter * if !argc()|NERDTree|endif
let NERDTreeIgnore = ['\.pyc$', '^__pycache__$']  " 过滤所有.pyc文件不显示
let g:NERDTreeShowLineNumbers=1  " 是否显示行号
let g:NERDTreeHidden=0     "不显示隐藏文件
"Making it prettier
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" curl -fLo /usr/share/vim/vim82/autoload/plug.vim --create-dirs https://ghproxy.com/raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('/usr/share/vim/vim82/plugged')

Plug 'https://github.com/junegunn/vim-easy-align.git'

Plug 'https://github.com/preservim/nerdtree.git'

Plug 'https://github.com/jistr/vim-nerdtree-tabs.git'

Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin.git'

Plug 'https://github.com/jiangmiao/auto-pairs.git'

Plug 'https://github.com/vim-airline/vim-airline.git'

"Plug 'ianva/vim-youdao-translater'

Plug 'https://github.com/vim-scripts/SuperTab.git'
"Plug 'https://github.com/vim-scripts/taglist.vim'

"Plug 'airblade/vim-gitgutter'

Plug 'https://github.com/acarapetis/vim-colors-github.git'
Plug 'https://github.com/rakr/vim-one.git'
Plug 'https://github.com/jacoborus/tender.vim.git'

call plug#end()

let light_time = 7
let dark_time = 20
set background=dark
colorscheme tender

let current_hour = system("date +%H")
if v:shell_error == 0
	if current_hour > light_time 
		if current_hour < dark_time
			set background=light
			colorscheme one
		endif
	endif
endif

" Map F5 running!
map <F5> :call RunCompile()<CR>

func! RunCompile()
	exec "w"
	if &filetype == 'tcl'
		exec "!tclsh %"
	endif
	if &filetype == 'c'
		exec "!gcc % -o %< -lm -g; ./%<"
	endif
	if &filetype == 'cpp'
		exec "!g++ % -o %< -lm -g; ./%<"
	endif
	if &filetype == 'go'
		exec "!go run %"
	endif
	if &filetype == 'rust'
		exec "!rustc %; ./%<"
	endif
	if &filetype == 'd'
		exec "!ldc2 %; ./%<"
	endif
endfunc

func CHeader()
	call append(0, "/*")
	call append(1, " * Author: Jeefy Fu")
	call append(2, " * Email: jeefy163@163.com")
	call append(3, " * Description:")
	call append(4, " */")
	call append(5, "")
	call append(6, "#include <stdlib.h>")
	call append(7, "#include <stdio.h>")
	call append(8, "#include <stdint.h>")
	call append(9, "#include <string.h>")
	call append(10,"#include <math.h>")
	call append(11,"#include <unistd.h>")
	call append(12, "")
	exec ":4"
endfunc

func CppHeader()
	call append(0, "/*")
	call append(1, " * Author: Jeefy Fu")
	call append(2, " * Email: jeefy163@163.com")
	call append(3, " * Description:")
	call append(4, " */")
	call append(5, "")
	call append(6, "#include <iostream>")
	call append(7, "#include <cmath>")
	call append(8, "#include <fstream>")
	call append(9, "#include <sstream>")
	call append(10, "#include <vector>")
	call append(11, "#include <array>")
	call append(12, "#include <string>")
	call append(13, "#include <algorithm>")
	call append(14, "#include <cstring>")
	exec ":4"
endfunc

func GoHeader()
	call append(0, "/*")
	call append(1, " * Author: Jeefy Fu")
	call append(2, " * Email: jeefy163@163.com")
	call append(3, " * Description:")
	call append(4, " */")
	call append(5, "package")
	call append(6, "")
	call append(7, "import (")
	call append(8, ")")
	exec ":6"
endfunc

func AddHeader()
	if &filetype == 'go'
		call GoHeader()
	elseif &filetype == 'c'
		call CHeader()
	elseif &filetype == 'cpp'
		call CppHeader()
	endif
endfunc

map <F4> :call AddHeader()<CR>

map <F2> :!cat %<CR>

"au VimEnter * !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'
"au VimLeave * !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Caps_Lock'
